type _anon_class_16_1 = 
 service {
   addNote: (text, text, vec text) -> ();
   addNoteToBoard: (BoardId, text, text, vec text) -> (Result_5);
   boardCnt: () -> (nat) query;
   createBoard: (BoardId, text, text, bool) -> (Result_3);
   deleteNote: (int) -> ();
   deleteNoteOfBoard: (BoardId, int) -> (Result_3);
   getAccessRequests: (BoardId) -> (Result_4) query;
   getBoard: (BoardId) -> (Result_3) query;
   getBoardIdsOfUser: () -> (Result_2) query;
   getBoards: () -> (Result_1) query;
   getNotes: () -> (vec Note) query;
   grantAccessRequest: (BoardId, int, text, text) -> (Result);
   notesCnt: () -> (nat) query;
   requestAccess: (BoardId, text) -> ();
   updateNote: (int, text, text, vec text) -> ();
   updateNoteOfBoard: (BoardId, int, text, text, vec text) -> (Result);
   userCnt: () -> (nat) query;
   whoami: () -> (text);
 };
type Result_5 = 
 variant {
   err: CommonError;
   ok: Note;
 };
type Result_4 = 
 variant {
   err: CommonError;
   ok: vec BoardAccessRequest;
 };
type Result_3 = 
 variant {
   err: CommonError;
   ok: Board;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: vec BoardId;
 };
type Result_1 = 
 variant {
   err: CommonError;
   ok: vec Board;
 };
type Result = 
 variant {
   err: CommonError;
   ok;
 };
type PrincipalName = text;
type Note = 
 record {
   boardId: int;
   content: text;
   createdAt: int;
   createdBy: PrincipalName;
   id: int;
   isMarked: bool;
   isSensitive: bool;
   sortOrder: int;
   tags: vec text;
   title: text;
   updatedAt: int;
   updatedBy: PrincipalName;
 };
type CommonError = 
 variant {
   board_not_found: text;
   duplicate_id: text;
   not_authorized: text;
   other: text;
 };
type BoardId = text;
type BoardAccessRequest = 
 record {
   boardId: BoardId;
   createdAt: int;
   displayName: text;
   grantedByUser: opt PrincipalName;
   id: int;
   status: text;
   updatedAt: int;
   user: PrincipalName;
 };
type Board = 
 record {
   admins: vec PrincipalName;
   createdAt: int;
   description: text;
   icon: opt blob;
   id: BoardId;
   isPrivate: bool;
   membersRead: vec PrincipalName;
   membersWrite: vec PrincipalName;
   name: text;
   notes: vec Note;
   updatedAt: int;
 };
service : () -> _anon_class_16_1
